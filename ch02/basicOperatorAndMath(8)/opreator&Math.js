'use strict';
/**
 * 피연산자(operand) -> 연산자가 연산을 수행하는 대상. 인수(argument)로 불리기도 한다.
 * 피연산자를 하나만 받는 연산자는 단항(unary) 연산자라고 부른다. 피연산자의 부호를
 * 뒤집는 단항 마이너스 연산자 -는 단항 연산자의 대표적인 예
 */
// let x=1;
// 
// x=-x;
// alert(x); //-1

//두 개의 피연산자를 받는 연산자는 이항(binary) 연산자라고 부른다.
let x=1,y=-3;
alert(y-x);
/**
 * JS에서 지원하는 수학 연산자는 다음과 같다.
 * 덧셈 +
 * 뺼셈 -
 * 곱셈 *
 * 나눗셈 /
 * 나머지%
 * 거듭제곱 **
 * 
 * 나머지 연산자
 * remainder operator는 % 기호로 나타내지만, 비율을 나타내는 퍼센트와 관련이 없다.
 * 나머지 연산자를 사용한 표현식 a % b는 a를 b로 나눈 후 그 나머지(remainder)를 정수로 반환해줍니다.
 */
alert(5%2);
alert(8%3);

/**
 * 거듭제곱 연산자 **
 * 거듭제곱 연산자를 사용한 a**b -> a를 b번 곱한 값이 반환
 */
alert(2**2);
alert(2**3);
alert(2**4);

//거듭제곱 연산자는 정수가 아닌 숫자에 대해서도 동작한다. 1/2를 사용하면 제곱근을 구할 수 있다.
alert(4**(1/2)); // (1/2 거듭제곱은 제곱근)
alert(8**(1/3)); // (1/3 거듭제곱은 세제곱근)

/**
 * 이항 연산자 '+'와 문자열 연결
 * +의 피연산자로 문자열이 전달되면 덧셈 연산자는 덧셈이 아닌 문자열을 병합(연결)합니다.
 */
let s="my"+"string";
alert(s); //mystring

//이항 연산자를 사용할 때는 피연산자 중 하나가 문자열이면 다른 하나도 문자열로 변환.
alert('1'+2); // "12"
alert(2+'1'); // "21"

//피연산자 순서가 중요하지 않고, 어느 하나가 문자열이면 다른 하나도 문자열로 변환.
alert(2+2+'1'); //'221'이 아니라 '41'이 출력
/**
 * 연산은 왼쪽에서 오른쪽으로 순차적으로 진행되기 떄문에 이러한 결과가 나왔다.
 * 두 개의 숫자 뒤에 문자열이 오는 경우, 숫자가 먼저 더해지고 그 후, 숫자와 문자열과의 병합이 일어난다.
 * 
 * 다른 산술 연산자가 오직 숫자형의 피연산자만 다루고, 피연산자가 숫자형이 아닌 경우에 그 형을 수자로 바꾸는
 * 것과는 대조적이다.
 */

alert(6-'2'); // 4, '2'를 숫자로 바꾼 후 연산이 진행
alert('6'/'2'); // 3, 두 피연산자가 숫자로 바뀐 후 연산이 진행된다.

/**
 * 단항 연산자 +와 숫자형으로의 변환
 * 덧셈 연산자 +는 이항 연산자뿐만 아니라 단항 연산자로도 사용할 수 있다.
 * 
 * 숫자에 단항 덧셈 연산자 -> 아무런 동작X
 * 피연산자가 숫자가 아닌 경우엔 숫자형으로의 변환이 일어난다.
 */

let k=1;
alert(+k); //1

let(y)=-2;
alert(+y); //-2

// 숫자형이 아닌 피연산자는 숫자형으로 변화합니다.
alert(+true); // 1
alert(+""); // 0

/**
 * 단항 덧셈 연산자는 짧은 문법으로도 Number()와 동일한 일을 할 수 있다.
 * 개발을 하다 보면 문자열을 숫자로 변환해야하는 경우가 자주 생긴다.
 * 이항 덧셈 연산자를 사용하면 아래 값이 문자열로 변해서 연결된다.
 */
let apples = "2";
let oranges = "3";

alert(apples+oranges); // 23, 이항 덧셈 연산자는 문자열을 연결

//원하는 대로 값을 더해주려면 단항 덧셈 연산자를 사용, 피연산자를 숫자형으로 변화시킨다.
alert(+apples+ +oranges); //5
// `Number(...)`를 사용해서 같은 동작을 하는 코드를 작성할 수 있지만, 더 기네요.
// alert( Number(apples) + Number(oranges) ); // 5

/**
 * 하나의 표현식에 둘 이상의 연산자가 있는 경우, 실행 순서는 연산자의 우선순위(precedence) 에 의해 결정됩니다.

1 + 2 * 2라는 식이 있을 때 곱셈이 먼저, 그 후에 덧셈이 일어난다는 것을 알고 계실 겁니다. 이런 개념이 연산자 우선순위입니다. 여기서 곱셈은 덧셈보다 더 높은 우선순위를 가지죠.

자바스크립트에서 정의한 연산자 우선순위가 마음에 들지 않는다면, 괄호를 사용하면 됩니다. 괄호는 모든 연산자보다 우선순위가 높기 때문에 자바스크립트에서 정의한 연산자 우선순위를 무력화시킵니다. 표현식 (1 + 2) * 2에서 괄호로 둘러싼 덧셈 연산자가 먼저 수행되는 것 같이 말이죠.

자바스크립트는 다양한 연산자를 제공하는데, 이 모든 연산자엔 우선순위가 매겨져 있습니다. 우선순위 숫자가 클수록 먼저 실행됩니다. 순위가 같으면 왼쪽부터 시작해서 오른쪽으로 연산이 수행됩니다.

아래는 우선순위 테이블(precedence table)의 일부를 발췌한 표입니다. 순서를 기억할 필요는 없지만, 동일한 기호의 단항 연산자는 이항 연산자보다 우선순위가 더 높다는 것에 주목해 주시기 바랍니다.
 */

/**
 * 할당 연산자
 * 무언가를 할당할 때 쓰이는 = 도 연산자이다.
 * 우선순위가 3으로 아주 낮다.
 * x = 2*2+1과 같은 표현식, 계산이 먼저 이뤄지고 그 결과가 X에 할당되는 이유이다.
 * 
 * 값을 반환하는 할당 연산자
 * =는 연산자이기 때문에 함축성을 내포
 * JS에서 대부분의 연산자들은 값을 반환한다.
 * +와 -뿐만 아니라 = 역시 값을 반환.
 */
let a=1;
let b=2;

let c=3-(a=b+1);

alert(a); // 3
alert(c); // 0

//할당 연산자 체이닝 -> 할당 연산자는 아래와 같이 여러 개를 연결할 수 도 있다.
let q,w,e;

q=w=e=2+2;

alert(q);// 4
alert(w);// 4
alert(e);// 4

//할당 연산자를 여러 개 연결한 경우, 평가는 우측부터 진행된다.
c = 2+2;
b = c;
a = c;

/**
 * 복합 할당 연산자
 * 변수에 연산자를 적용하고 그 결과를 같은 변수에 저장해야 하는 경우가 종종 생긴다.
 */

let n=2;
n=n+5;
n=n*2;

// 복합 할당 연산자의 우선순위는 할당 연산자와 동일.
let o=2;
o*=3+5;

alert(o); //16 (*=의 우측이 먼저 평가된다.)

/**
 * 증감 연산자
 * 숫자를 하나 늘리거나 줄이는 것은 자주 사용되는 연산.
 * ++ -> 변수 1 증가
 * -- -> 변수 1 감소
 * 증가, 감소 연산자는 변수에만 쓸 수 있다. 5++와 같이 갑셍 사용하려고 하면 에러가 발생한다.
 * ++와 -- 연산자는 변수 앞이나 뒤에 올 수 있다.
 * counter++와 같이 피연산자 뒤에 올때는, '후위형(postfix form)'이라고 부른다.
 * ++counter와 같이 피연산자 앞에 올 때는, '전위형(prefix form)' 이라고 부른다.
 * 전위형은 증가.감소 후의 새로운 값을 반환하는 반면, 후위형은 증가.감소 전의 기존 값을 반환한다.
 */

// let counter=1;
// let i=++counter; // (*)

// alert(i); //2

//반환 값으 사용하지 않는 경우라면 전.후위형엔 차이가 없다.
// let counter=0;
// counter++;
// ++counter;
// alert(counter); //2, 위 두 라인은 동일한 연산을 수행한다.

//값을 증가시키고 난 후, 증가한 값을 바로 사용하려면 전위형 증가 연산자를 사용하면 된다.
// let counter=0;
// alert(++counter); // 1

//값을 증가시키지만, 증가 전의 기존값을 사용하려면 후위형 증가 연산자를 사용하면 된다.
let counter=0;
alert(counter++); //0

/**
 * 비트연산자
 * 비트 연산자(bitwise operator)는 인수를 32비트 정수로 변환하여 이진 연산을 수행합니다.

이런 비트 조작 관련 연산자는 자바스크립트뿐만 아니라 대부분의 프로그래밍 언어에서 지원합니다.

아래는 비트 연산 시 쓰이는 연산자 목록입니다.

비트 AND ( & )
비트 OR ( | )
비트 XOR ( ^ )
비트 NOT ( ~ )
왼쪽 시프트(LEFT SHIFT) ( << )
오른쪽 시프트(RIGHT SHIFT) ( >> )
부호 없는 오른쪽 시프트(ZERO-FILL RIGHT SHIFT) ( >>> )
비트 연산자는 저수준(2진 표현)에서 숫자를 다뤄야 할 때 쓰이므로 흔하게 쓰이진 않습니다.
웹 개발 시엔 이런 일이 자주 일어나지 않기 때문에 비트 연산자를 만날 일은 거의 없죠.
그렇긴 해도 암호를 다뤄야 할 땐 비트 연산자가 유용하기 때문에 때가 되면 MDN의 비트 연산자 문서를 보시는 걸 추천합니다.
 */

/**
 * 쉼표 연산자
 * 쉼표 연산자(comma operator) ,는 좀처럼 보기 힘들고, 특이한 연산자 중 하나입니다. 
 * 코드를 짧게 쓰려는 의도로 가끔 사용됩니다. 이런 코드를 만났을 때, 어떤 연산 결과가 도출되는지 알아야 하므로 쉼표 연산자에 대해 알아보도록 합시다.
쉼표 연산자 ,는 여러 표현식을 코드 한 줄에서 평가할 수 있게 해줍니다.
이때 표현식 각각이 모두 평가되지만, 마지막 표현식의 평가 결과만 반환되는 점에 유의해야 합니다.
 */
let g=(1+2,3+4);
alert(g); //7 (3+4)의 결과